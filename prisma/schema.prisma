generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String
  role          Role      @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  lawyer        Lawyer?
  clientRequests ClientRequest[]
  reviews       Review[]
  questions     Question[]
  answers       Answer[]
  appointments  Appointment[]
  notifications Notification[]

  @@map("users")
}

model Lawyer {
  id                Int       @id @default(autoincrement())
  userId           Int       @unique
  user             User      @relation(fields: [userId], references: [id])
  bio              String
  hourlyRate       Float
  yearsExperience  Int
  city             String
  sector           String
  rating           Float     @default(0)
  reviewCount      Int       @default(0)
  
  // Relations
  specializations  LawyerSpecialization[]
  responses        LawyerResponse[]
  appointments     Appointment[]
  reviews         Review[]

  @@map("lawyers")
}

model Specialization {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  lawyers   LawyerSpecialization[]

  @@map("specializations")
}

model LawyerSpecialization {
  lawyerId         Int
  specializationId Int
  lawyer           Lawyer         @relation(fields: [lawyerId], references: [id])
  specialization   Specialization @relation(fields: [specializationId], references: [id])

  @@id([lawyerId, specializationId])
  @@map("lawyer_specializations")
}

model ClientRequest {
  id          Int       @id @default(autoincrement())
  clientId    Int
  client      User      @relation(fields: [clientId], references: [id])
  title       String
  description String
  domain      String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  responses   LawyerResponse[]

  @@map("client_requests")
}

model LawyerResponse {
  id          Int       @id @default(autoincrement())
  requestId   Int
  lawyerId    Int
  message     String
  proposal    String?
  status      ResponseStatus @default(PENDING)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  request     ClientRequest @relation(fields: [requestId], references: [id])
  lawyer      Lawyer       @relation(fields: [lawyerId], references: [id])

  @@map("lawyer_responses")
}

model Appointment {
  id          Int       @id @default(autoincrement())
  clientId    Int
  lawyerId    Int
  dateTime    DateTime
  duration    Int       // Duration in minutes
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  client      User      @relation(fields: [clientId], references: [id])
  lawyer      Lawyer    @relation(fields: [lawyerId], references: [id])

  @@map("appointments")
}

model Review {
  id          Int       @id @default(autoincrement())
  clientId    Int
  lawyerId    Int
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  
  client      User      @relation(fields: [clientId], references: [id])
  lawyer      Lawyer    @relation(fields: [lawyerId], references: [id])

  @@map("reviews")
}

model Question {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  content     String
  status      QuestionStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  answers     Answer[]

  @@map("questions")
}

model Answer {
  id          Int       @id @default(autoincrement())
  questionId  Int
  userId      Int
  content     String
  isAccepted  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  question    Question  @relation(fields: [questionId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("answers")
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  type        NotificationType
  title       String
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum Role {
  CLIENT
  LAWYER
  ADMIN
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ResponseStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum QuestionStatus {
  OPEN
  CLOSED
  RESOLVED
}

enum NotificationType {
  REQUEST_UPDATE
  RESPONSE_RECEIVED
  APPOINTMENT_REMINDER
  QUESTION_ANSWERED
  REVIEW_RECEIVED
}